{"version":3,"sources":["components/Navbar.js","components/1_json.js","components/2_xml.js","components/Playground.js","App.js","serviceWorker.js","index.js","img/thu-logo.png"],"names":["Navbar","style","width","height","borderBottom","backgroundColor","display","alignItems","margin","href","src","thuLogo","alt","Json","useState","jsonInput","setJsonInput","purchaseOrder","convertedJSON","setConvertedJSON","Paper","padding","mode","theme","onChange","value","name","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","flexDirection","marginBottom","Button","onClick","JSON","parse","error","console","log","alert","variant","color","overflow","border","borderRadius","uid","id","fontWeight","customer","address","street","city","supplier","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","items","Array","isArray","map","index","partNumber","description","qty","key","component","scope","Xml","xmlInput","setXMLInput","convertedXML","setConvertedXML","converted","convert","xml2js","replace","ignoreComment","compact","_text","item","Playground","currentTab","setCurrentTab","flexGrow","justifyContent","Tabs","indicatorColor","textColor","e","v","Tab","label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.fd43fcbe.chunk.js","sourcesContent":["import React from 'react'\nimport thuLogo from '../img/thu-logo.png'\n\nexport default function Navbar(){\n    return (\n        <div style={{width: \"100%\", height: \"80px\", borderBottom: \"1px solid #cdd9e1\", backgroundColor: \"white\", display: \"flex\", alignItems: \"center\"}}>\n            <div style={{margin: \"0 2rem\"}}>\n                <a href=\"/\">\n                    <img height=\"80\" src={thuLogo} alt=\"THU Logo\"/>\n                </a>\n            </div>\n            <div>\n                Business Information Systems SS 2020 <br/> WL 4\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport {Paper, Button} from '@material-ui/core'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\n\n\nexport default function Json(){\n    const [jsonInput, setJsonInput] = useState(\"\")\n    const [convertedJSON, setConvertedJSON] = useState({purchaseOrder: {}})\n    const {purchaseOrder} = convertedJSON\n\n    const handleConvertJson = () => {\n        try {\n            const converted = JSON.parse(jsonInput)\n            if (converted.purchaseOrder){\n                setConvertedJSON(JSON.parse(jsonInput))\n            }\n        } catch (error) {\n            console.log(error)\n            alert(\"Not a valid JSON format\")\n        }\n      \n    }\n\n\n    return(\n\n                <Paper style={{height: \"500px\", padding: \"2rem\"}}>\n                    <h3>Practice JSON</h3>\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: \"500px\"}}>\n                        <AceEditor\n                            mode=\"json\"\n                            style={{height: \"450px\"}}\n                            theme=\"monokai\"\n                            onChange={(value) => setJsonInput(value)}\n                            value={jsonInput}\n                            name=\"JSON Editor\"\n                            editorProps={{ $blockScrolling: true }}\n                            setOptions={{\n                                enableBasicAutocompletion: false,\n                                enableLiveAutocompletion: false,\n                                enableSnippets: false,\n                                showLineNumbers: true,\n                                tabSize: 2,\n                            }}\n                        />                        \n                        </div>\n                        <div style={{margin: \"0 1rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <Button onClick={handleConvertJson} variant=\"contained\" color=\"primary\">Send</Button>\n                            </div>\n                            <div>\n                                <Button onClick={()=> setConvertedJSON({purchaseOrder: {}})} variant=\"outlined\" color=\"primary\">Clear</Button>\n                            </div>\n                        </div>\n                        <div style={{height: \"420px\", width: \"300px\", overflow: \"auto\", border: \"1px solid gray\", padding: \"1rem\", borderRadius: \"5px\"}}>\n                            <h3>\n                                Purchase Order {purchaseOrder.uid && `No. ${purchaseOrder.id}`}\n                            </h3>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Customer\n                                </div>\n                                {purchaseOrder.customer && \n                                <>\n                                    <div>\n                                        {purchaseOrder.customer.name}\n                                    </div>\n                                    {purchaseOrder.customer.address && \n                                    <div>\n                                        {purchaseOrder.customer.address.street} <br/>\n                                        {purchaseOrder.customer.address.city}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                            <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Supplier\n                                </div>\n                                {purchaseOrder.supplier && \n                                <>\n                                <div>\n                                    {purchaseOrder.supplier.name}\n                                </div>\n                                {purchaseOrder.supplier.address && \n                                    <div>\n                                        {purchaseOrder.supplier.address.street} <br/>\n                                        {purchaseOrder.supplier.address.city}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\"}}>\n                                    Items\n                                </div>\n                                 <TableContainer>\n                                    <Table>\n                                        <TableHead>\n                                        <TableRow>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Part #</TableCell>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Description</TableCell>\n                                            <TableCell align=\"right\" style={{fontWeight: \"bold\"}}>Quantity</TableCell>\n                                        </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                        {purchaseOrder.items && Array.isArray(purchaseOrder.items) &&\n                                            purchaseOrder.items.map(({partNumber, description, qty}, index)=> (\n                                            <TableRow key={index}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {partNumber}\n                                                </TableCell>\n                                                <TableCell >{description}</TableCell>\n                                                <TableCell align=\"right\">{qty}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </Paper>\n    )\n}","import React, { useState } from 'react'\nimport {Paper, Button} from '@material-ui/core'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport convert from 'xml-js';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\n\nexport default function Xml(){\n    const [xmlInput, setXMLInput] = useState(\"\")\n    const [convertedXML, setConvertedXML] = useState({purchaseOrder: {}})\n    const {purchaseOrder} = convertedXML\n\n    const handleConvertXML = () => {\n        try {\n            const options = {ignoreComment: true, compact: true};\n            const converted = convert.xml2js(xmlInput.replace(/`/g, \"\"), options);\n            console.log(converted)\n            setConvertedXML(converted)\n        } catch (error) {\n            console.log(error)\n            alert(error)\n        }\n\n           // to convert xml text to javascript object\n        // const converted = JSON.parse(xmlInput)\n        // if (converted.purchaseOrder){\n        //     setConvertedXML(JSON.parse(xmlInput))\n        // }\n    }\n\n    return(\n\n                <Paper style={{height: \"500px\", padding: \"2rem\"}}>\n                    <h3>Practice XML</h3>\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: \"500px\"}}>\n                        <AceEditor\n                            mode=\"xml\"\n                            style={{height: \"450px\"}}\n                            theme=\"monokai\"\n                            onChange={(value) => setXMLInput(value)}\n                            value={xmlInput}\n                            name=\"XML Editor\"\n                            editorProps={{ $blockScrolling: true }}\n                            setOptions={{\n                                enableBasicAutocompletion: false,\n                                enableLiveAutocompletion: false,\n                                enableSnippets: false,\n                                showLineNumbers: true,\n                                tabSize: 2,\n                            }}\n                        />\n                            {/* <TextField fullWidth label=\"XML Input Field\" variant=\"filled\" rows={20} rowsMax={20} multiline value={xmlInput} onChange={(e) => setXMLInput(e.target.value)}/> */}\n                        </div>\n                        <div style={{margin: \"0 1rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <Button onClick={handleConvertXML} variant=\"contained\" color=\"primary\">Send</Button>\n                            </div>\n                            <div>\n                                <Button onClick={() => setConvertedXML({purchaseOrder: {}})} variant=\"outlined\" color=\"primary\">Clear</Button>\n                            </div>\n                        </div>\n                        <div style={{height: \"420px\", width: \"300px\", overflow: \"auto\", border: \"1px solid gray\", padding: \"1rem\", borderRadius: \"5px\"}}>\n                            <h3>\n                                Purchase Order {purchaseOrder && purchaseOrder.uid && `No. ${purchaseOrder.id}`}\n                            </h3>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Customer\n                                </div>\n                                { purchaseOrder && purchaseOrder.customer && \n                                <>\n                                    <div>\n                                        {purchaseOrder.customer.name && purchaseOrder.customer.name._text}\n                                    </div>\n                                    { purchaseOrder && purchaseOrder.customer.address && \n                                    <div>\n                                        {  purchaseOrder.customer.address.street && purchaseOrder.customer.address.street._text} <br/>\n                                        { purchaseOrder.customer.address.city && purchaseOrder.customer.address.city._text}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                            <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Supplier\n                                </div>\n                                { purchaseOrder && purchaseOrder.supplier && \n                                <>\n                                <div>\n                                    {purchaseOrder.supplier.name && purchaseOrder.supplier.name._text}\n                                </div>\n                                { purchaseOrder && purchaseOrder.supplier.address && \n                                    <div>\n                                        { purchaseOrder.supplier.address.street && purchaseOrder.supplier.address.street._text} <br/>\n                                        { purchaseOrder.supplier.address.city && purchaseOrder.supplier.address.city._text}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\"}}>\n                                    Items\n                                </div>\n                                 <TableContainer>\n                                    <Table>\n                                        <TableHead>\n                                        <TableRow>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Part #</TableCell>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Description</TableCell>\n                                            <TableCell align=\"right\" style={{fontWeight: \"bold\"}}>Quantity</TableCell>\n                                        </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                        {purchaseOrder && purchaseOrder.items && purchaseOrder.items.item &&  Array.isArray(purchaseOrder.items.item) &&\n                                            purchaseOrder.items.item.map(({partNumber, description, qty}, index)=> (\n                                            <TableRow key={index}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {partNumber && partNumber._text}\n                                                </TableCell>\n                                                <TableCell >{description && description._text}</TableCell>\n                                                <TableCell align=\"right\">{qty && qty._text}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </Paper>\n    )\n}","import React, { useState } from 'react'\nimport Navbar from './Navbar'\nimport Json from './1_json';\nimport Xml from './2_xml';\nimport {Tabs, Tab} from '@material-ui/core'\n\nexport default function Playground(){\n    const [currentTab, setCurrentTab] = useState(0)\n    return(\n        <div style={{height: \"100vh\", width: \"100%\", display: \"flex\", flexDirection: \"column\", backgroundColor: \"rgb(249, 249, 249)\"}}>\n            <Navbar/>\n            <div style={{padding: \"2rem\", flexGrow: 1, display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", overflow: \"auto\"}}>\n                <Tabs\n                    value={currentTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(e,v) => setCurrentTab(v)}\n                >\n                    <Tab label=\"JSON\" />\n                    <Tab label=\"XML\" />\n                </Tabs>\n            {currentTab === 0 && <Json/> }\n             {currentTab === 1 &&   <Xml/>}\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport Playground from './components/Playground';\n\nfunction App() {\n  return (\n    <Playground/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/thu-logo.3ff61d7f.png\";"],"sourceRoot":""}