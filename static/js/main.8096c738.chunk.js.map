{"version":3,"sources":["img/thu-logo.png","components/Navbar.js","components/1_json.js","components/2_xml.js","components/Playground.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","style","width","height","borderBottom","backgroundColor","display","alignItems","margin","href","src","thuLogo","alt","sample","purchaseOrder","customer","uid","name","address","street","city","supplier","items","partNumber","description","qty","Json","useState","jsonInput","setJsonInput","convertedJSON","setConvertedJSON","console","log","Paper","padding","TextField","fullWidth","label","variant","rows","rowsMax","multiline","value","onChange","e","target","flexDirection","marginBottom","Button","onClick","JSON","parse","error","alert","color","overflow","border","borderRadius","id","fontWeight","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","Array","isArray","map","index","key","component","scope","Xml","xmlInput","setXMLInput","initialObject","convertedXML","setConvertedXML","converted","convert","xml2js","replace","ignoreComment","compact","_text","item","Playground","flexGrow","flexShrink","justifyContent","marginTop","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8096c738.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thu-logo.3ff61d7f.png\";","import React from 'react'\nimport thuLogo from '../img/thu-logo.png'\n\nexport default function Navbar(){\n    return (\n        <div style={{width: \"100%\", height: \"80px\", borderBottom: \"1px solid #cdd9e1\", backgroundColor: \"white\", display: \"flex\", alignItems: \"center\"}}>\n            <div style={{margin: \"0 2rem\"}}>\n                <a href=\"/\">\n                    <img height=\"80\" src={thuLogo} alt=\"THU Logo\"/>\n                </a>\n            </div>\n            <div>\n                BIS WL 4<br/>XML & JSON Exercise\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport {Paper, TextField, Button} from '@material-ui/core'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst sample = {\n    purchaseOrder: {\n        customer: {\n            uid: '022343',\n            name: \"Tim Westhoff\",\n            address: {\n                street: \"Werner-von-Siemens-Str. 1\",\n                city: \"80333 Muenchen\"\n            },\n        },\n        supplier: {\n            name: \"Technische Hochschule Ulm\",\n            address: {\n                street: \"PrittwitzstraÃŸe 10\",\n                city: \"89075 Ulm\"\n            },\n        },\n        items: [\n            {\n                partNumber: \"123\",\n                description: \"Kugelschreiber\",\n                qty: 4\n            },\n            {\n                partNumber: \"132\",\n                description: \"BIS Skript\",\n                qty: 1\n            },\n            {\n                partNumber: \"231\",\n                description: \"Schreibblock\",\n                qty: 5\n            },\n            {\n                partNumber: \"321\",\n                description: \"Ordner\",\n                qty: 2\n            }\n        ]\n    }\n}\n\nexport default function Json(){\n    const [jsonInput, setJsonInput] = useState(\"\")\n    const [convertedJSON, setConvertedJSON] = useState({purchaseOrder: {}})\n    const {purchaseOrder} = convertedJSON\n    console.log(sample)\n\n    const handleConvertJson = () => {\n        try {\n            const converted = JSON.parse(jsonInput)\n            if (converted.purchaseOrder){\n                setConvertedJSON(JSON.parse(jsonInput))\n            }\n        } catch (error) {\n            alert(\"Not a valid JSON format\")\n        }\n      \n    }\n\n\n    return(\n\n                <Paper style={{height: \"500px\", padding: \"2rem\"}}>\n                    <h3>Practice JSON</h3>\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: \"300px\"}}>\n                            <TextField fullWidth label=\"JSON Input Field\" variant=\"filled\" rows={20} rowsMax={20} multiline value={jsonInput} onChange={(e) => setJsonInput(e.target.value)}/>\n                        </div>\n                        <div style={{margin: \"0 1rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <Button onClick={handleConvertJson} variant=\"contained\" color=\"primary\">Send</Button>\n                            </div>\n                            <div>\n                                <Button onClick={()=> setConvertedJSON({purchaseOrder: {}})} variant=\"outlined\" color=\"primary\">Clear</Button>\n                            </div>\n                        </div>\n                        <div style={{height: \"380px\", width: \"300px\", overflow: \"auto\", border: \"1px solid gray\", padding: \"1rem\", borderRadius: \"5px\"}}>\n                            <h3>\n                                Purchase Order {purchaseOrder.id && `No. ${purchaseOrder.id}`}\n                            </h3>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Customer\n                                </div>\n                                {purchaseOrder.customer && \n                                <>\n                                    <div>\n                                        {purchaseOrder.customer.name}\n                                    </div>\n                                    {purchaseOrder.customer.address && \n                                    <div>\n                                        {purchaseOrder.customer.address.street} <br/>\n                                        {purchaseOrder.customer.address.city}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                            <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Supplier\n                                </div>\n                                {purchaseOrder.supplier && \n                                <>\n                                <div>\n                                    {purchaseOrder.supplier.name}\n                                </div>\n                                {purchaseOrder.supplier.address && \n                                    <div>\n                                        {purchaseOrder.supplier.address.street} <br/>\n                                        {purchaseOrder.supplier.address.city}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\"}}>\n                                    Items\n                                </div>\n                                 <TableContainer>\n                                    <Table>\n                                        <TableHead>\n                                        <TableRow>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Part #</TableCell>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Description</TableCell>\n                                            <TableCell align=\"right\" style={{fontWeight: \"bold\"}}>Quantity</TableCell>\n                                        </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                        {purchaseOrder.items && Array.isArray(purchaseOrder.items) &&\n                                            purchaseOrder.items.map(({partNumber, description, qty}, index)=> (\n                                            <TableRow key={index}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {partNumber}\n                                                </TableCell>\n                                                <TableCell >{description}</TableCell>\n                                                <TableCell align=\"right\">{qty}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </Paper>\n    )\n}","import React, { useState } from 'react'\nimport {Paper, TextField, Button} from '@material-ui/core'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport convert from 'xml-js';\n\n\nconst sample = `<purchaseOrder>\n<customer uid=\"022343\">\n<name>Tim Westhoff</name>\n<address>\n<street>Werner-von-Siemens-Str. 1</street>\n<city>80333 Muenchen</city>\n</address>\n</customer>\n<supplier>\n<name>Technische Hochschule Ulm</name>\n<address>\n<street>PrittwitzstraÃŸe 10</street>\n<city>89075 Ulm</city>\n</address>\n</supplier>\n<items>\n<item>\n<partNumber>123</partNumber>\n<description>Kugelschreiber</description>\n<qty>4</qty>\n</item>\n<item>\n<partNumber>132</partNumber>\n<description>BIS Skript</description>\n<qty>1</qty>\n</item>\n<item>\n<partNumber>231</partNumber>\n<description>Schreibblock</description>\n<qty>5</qty>\n</item>\n<item>\n<partNumber>321</partNumber>\n<description>Ordner</description>\n<qty>2</qty>\n</item>\n</items>\n</purchaseOrder>`\n\nexport default function Xml(){\n    const [xmlInput, setXMLInput] = useState(\"\")\n    const initialObject = {purchaseOrder: {}}\n    const [convertedXML, setConvertedXML] = useState(initialObject)\n    const {purchaseOrder} = convertedXML\n\n    console.log(sample)\n\n    const handleConvertXML = () => {\n        const options = {ignoreComment: true, compact: true};\n        const converted = convert.xml2js(xmlInput.replace(/`/g, \"\"), options);\n        console.log(converted)\n        if (converted.purchaseOrder){\n            setConvertedXML(converted)\n        } else {\n            setConvertedXML(initialObject)\n        }\n    }\n\n    return(\n\n                <Paper style={{height: \"500px\", padding: \"2rem\"}}>\n                    <h3>Practice XML</h3>\n                    <div style={{display: \"flex\", alignItems: \"center\"}}>\n                        <div style={{width: \"300px\"}}>\n                            <TextField fullWidth label=\"XML Input Field\" variant=\"filled\" rows={20} rowsMax={20} multiline value={xmlInput} onChange={(e) => setXMLInput(e.target.value)}/>\n                        </div>\n                        <div style={{margin: \"0 1rem\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <Button onClick={handleConvertXML} variant=\"contained\" color=\"primary\">Send</Button>\n                            </div>\n                            <div>\n                                <Button onClick={() => setConvertedXML({purchaseOrder: {}})} variant=\"outlined\" color=\"primary\">Clear</Button>\n                            </div>\n                        </div>\n                        <div style={{height: \"380px\", width: \"300px\", overflow: \"auto\", border: \"1px solid gray\", padding: \"1rem\", borderRadius: \"5px\"}}>\n                            <h3>\n                                Purchase Order {purchaseOrder.id && `No. ${purchaseOrder.id}`}\n                            </h3>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Customer\n                                </div>\n                                {purchaseOrder.customer && \n                                <>\n                                    <div>\n                                        {purchaseOrder.customer.name._text}\n                                    </div>\n                                    {purchaseOrder.customer.address && \n                                    <div>\n                                        {purchaseOrder.customer.address.street._text} <br/>\n                                        {purchaseOrder.customer.address.city._text}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                            <div style={{fontWeight: \"bold\", marginBottom: \".5rem\"}}>\n                                    Supplier\n                                </div>\n                                {purchaseOrder.supplier && \n                                <>\n                                <div>\n                                    {purchaseOrder.supplier.name._text}\n                                </div>\n                                {purchaseOrder.supplier.address && \n                                    <div>\n                                        {purchaseOrder.supplier.address.street._text} <br/>\n                                        {purchaseOrder.supplier.address.city._text}\n                                    </div>\n                                    }\n                                </>}\n                            </div>\n                            <div style={{marginBottom: \"1rem\"}}>\n                                <div style={{fontWeight: \"bold\"}}>\n                                    Items\n                                </div>\n                                 <TableContainer>\n                                    <Table>\n                                        <TableHead>\n                                        <TableRow>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Part #</TableCell>\n                                            <TableCell style={{fontWeight: \"bold\"}}>Description</TableCell>\n                                            <TableCell align=\"right\" style={{fontWeight: \"bold\"}}>Quantity</TableCell>\n                                        </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                        {purchaseOrder.items && purchaseOrder.items.item &&  Array.isArray(purchaseOrder.items.item) &&\n                                            purchaseOrder.items.item.map(({partNumber, description, qty}, index)=> (\n                                            <TableRow key={index}>\n                                                <TableCell component=\"th\" scope=\"row\">\n                                                    {partNumber._text}\n                                                </TableCell>\n                                                <TableCell >{description._text}</TableCell>\n                                                <TableCell align=\"right\">{qty._text}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </Paper>\n    )\n}","import React from 'react'\nimport Navbar from './Navbar'\nimport Json from './1_json';\nimport Xml from './2_xml';\n// import {Tabs, Tab} from '@material-ui/core'\n\nexport default function Playground(){\n    // const [currentTab, setCurrentTab] = useState(0)\n    return(\n        <div style={{width: \"100%\", display: \"flex\", flexDirection: \"column\", backgroundColor: \"rgb(249, 249, 249)\"}}>\n            <Navbar/>\n            <div style={{padding: \"2rem\", flexGrow: 1, display: \"flex\", flexShrink: 0, flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", overflow: \"auto\"}}>\n                {/* <Tabs\n                    value={currentTab}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"\n                    onChange={(e,v) => setCurrentTab(v)}\n                > */}\n                    {/* <Tab label=\"JSON\" />\n                    <Tab label=\"XML\" />\n                </Tabs> */}\n            <Json/>\n            <div style={{marginTop: \"1rem\"}}>\n            <Xml/>\n            </div>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport Playground from './components/Playground';\n\nfunction App() {\n  return (\n    <Playground/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}